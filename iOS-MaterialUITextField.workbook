---
uti: com.xamarin.workbook
id: b56ef2cf-78b1-44b4-b5a1-f726df89bbd8
title: iOS-Empty
platforms:
- iOS
---

Modified sources from [FloatLabeledEntry](https://github.com/gshackles/FloatLabeledEntry/blob/master/src/iOS/FloatLabeledEntry.iOS/FloatLabeledTextField.cs):

```csharp
using System;
using UIKit;
using CoreGraphics;
using CoreAnimation;
using Foundation;
using System.ComponentModel;

	public class FloatLabeledTextField : UITextField 
	{
		private UILabel _floatingLabel;

        [DisplayName("Label Color"), Export("FloatingLabelTextColor"), Browsable(true)]
        public UIColor FloatingLabelTextColor { get; set; } = UIColor.Gray;

        [DisplayName("Label Active Color"), Export("FloatingLabelActiveTextColor"), Browsable(true)]
        public UIColor FloatingLabelActiveTextColor { get; set; } = UIColor.Blue;

        public UIFont FloatingLabelFont
        {
            get { return _floatingLabel.Font; }
            set { _floatingLabel.Font = value; }
        }

        public FloatLabeledTextField(CGRect frame)
            : base(frame)
        {
            InitializeLabel();
        }

        public FloatLabeledTextField(IntPtr handle)
            : base(handle)
        {
        }

        public override void AwakeFromNib() => InitializeLabel();

        private void InitializeLabel()
        {
            _floatingLabel = new UILabel
            {
                Alpha = 0.0f,
                Font = UIFont.BoldSystemFontOfSize(12)
            };

            AddSubview(_floatingLabel);

            var bottomLine = new CALayer();
            bottomLine.Frame = new CGRect(-10, 40 - 1, 120, 1);
            bottomLine.BackgroundColor = UIColor.Green.CGColor;

            Layer.AddSublayer(bottomLine);

            Placeholder = Placeholder; // sets up label frame
        }

		public override string Placeholder 
		{
			get { return base.Placeholder; }
			set 
			{
				base.Placeholder = value;

				_floatingLabel.Text = value;
				_floatingLabel.SizeToFit();
				_floatingLabel.Frame = 
					new CGRect(
						0, _floatingLabel.Font.LineHeight, 
						_floatingLabel.Frame.Size.Width, _floatingLabel.Frame.Size.Height);
			}
		}

		public override CGRect TextRect(CGRect forBounds)
		{
			if (_floatingLabel == null)
				return base.TextRect(forBounds);

			return InsetRect(base.TextRect(forBounds), new UIEdgeInsets(_floatingLabel.Font.LineHeight, 0, 0, 0));
		}

		public override CGRect EditingRect(CGRect forBounds)
		{
			if (_floatingLabel == null)
				return base.EditingRect(forBounds);

			return InsetRect(base.EditingRect(forBounds), new UIEdgeInsets(_floatingLabel.Font.LineHeight, 0, 0, 0));
		}

		public override CGRect ClearButtonRect(CGRect forBounds)
		{
			var rect = base.ClearButtonRect(forBounds);

			if (_floatingLabel == null)
				return rect;

			return new CGRect(
				rect.X, rect.Y + _floatingLabel.Font.LineHeight / 2.0f, 
				rect.Size.Width, rect.Size.Height);
		}

		public override void LayoutSubviews()
		{
			base.LayoutSubviews();

			Action updateLabel = () =>
			{
				if (!string.IsNullOrEmpty(Text))
				{
					_floatingLabel.Alpha = 1.0f;
					_floatingLabel.Frame = 
						new CGRect(
							_floatingLabel.Frame.Location.X, 
							2.0f, 
							_floatingLabel.Frame.Size.Width, 
							_floatingLabel.Frame.Size.Height);
				}
				else
				{
					_floatingLabel.Alpha = 0.0f;
					_floatingLabel.Frame = 
						new CGRect(
							_floatingLabel.Frame.Location.X,
							_floatingLabel.Font.LineHeight,
							_floatingLabel.Frame.Size.Width,
							_floatingLabel.Frame.Size.Height);
				}
			};

			if (IsFirstResponder)
			{
                _floatingLabel.TextColor = FloatingLabelActiveTextColor;

                var shouldFloat = !string.IsNullOrEmpty(Text);
                var isFloating = _floatingLabel.Alpha == 1f;

                if (shouldFloat == isFloating)
                {
                    updateLabel();
                }
                else
                {
                    Animate(
                        0.3f, 0.0f, 
                        UIViewAnimationOptions.BeginFromCurrentState
                        | UIViewAnimationOptions.CurveEaseOut,
                        () => updateLabel(),
                        () => {});
                }
			}
			else
			{
				_floatingLabel.TextColor = FloatingLabelTextColor;

				updateLabel();
			}
		}

		private static CGRect InsetRect(CGRect rect, UIEdgeInsets insets) =>
			new CGRect(
    			rect.X + insets.Left, 
    			rect.Y + insets.Top, 
    			rect.Width - insets.Left - insets.Right, 
    			rect.Height - insets.Top - insets.Bottom);
	}
```

Declares ViewController:

```csharp
class VC : UIViewController
{
    public override void ViewDidLoad()
    {
        View.BackgroundColor = UIColor.White;

        var input = new FloatLabeledTextField(CGRect.Empty);
        input.TranslatesAutoresizingMaskIntoConstraints = false;

        input.BorderStyle = UITextBorderStyle.None;
        input.Placeholder = "asdasd";       

        View.AddSubview(input);

        NSLayoutConstraint.ActivateConstraints(new []{
            input.CenterXAnchor.ConstraintEqualTo(View.CenterXAnchor),
            input.CenterYAnchor.ConstraintEqualTo(View.CenterYAnchor),
            input.WidthAnchor.ConstraintEqualTo(100),
        });
        
    }
}
```

Register ViewController as Root. Sample for Xamarin.WorkBooks:

```csharp
KeyWindow.RootViewController = new VC();
```